//***************************************************************************
//
//  Hung Nguyen
//  Z1924897
//  CSCI340 - 0002
//
//  I certify that this is my own work and where appropriate an extension
//  of the starter code provided for the assignment.
//
//***************************************************************************
#ifndef twosort_h
#define twosort_h

#include <vector>
using std::vector;

constexpr int ARRAY_SIZE = 200;
constexpr int TEST_ARRAY_SIZE = 100;
constexpr int LOW = 1;
constexpr int HIGH = 1000;
constexpr int SEED1 = 1;
constexpr int SEED2 = 3;

/**
 * This first line is a brief description.
 *
 * The rest of the lines are a more detailed description of the
 * function that outlines what it does and anything interesting about
 * how it does it.
 *
 * @param x Description of the first parameter.
 * @param y Description of the second parameter.
 * @param z Description of the third parameter.
 *
 * @return This is where you describe the possible return values.
 *
 * @note This is how you can add an optional note about the function that
 *    may be of interest to someone using it.
 *
 * @warning This is how you can add an optional warning to a user of the
 *    function suitable for noting things like 'This function is not thread
 *    safe' and so on.
 *
 * @bug This is how you can add an optional description of a known bug in the
 *    function such as: This only works for positive values of z.
 ********************************************************************************/

/**
 * Generate two vectors with random numbers.
 *
 * Fill the elements of vectors v1 and v2 with random numbers in the range [LOW=1,HIGH=1000],
 * generated by two sets of pseudo-random numbers with the seed values s1 and s2, where s1 is
 * for v1 and s2 is for v2.
 *
 * @param v1 Vector v1.
 * @param v2 Vector v2.
 * @param s1 Seed value s1.
 * @param s2 Seed value s2.
 *
 *********************************************************************************/
void generateVectors(vector<int> &v1, vector<int> &v2, int s1, int s2);

/**
 * A linear search algorithm, where x is the searched item in vector v.
 *
 * The function starts searching for x from the begiining of vector v to the end, but it stops searching
 * when there is a match.
 *
 * @param v The searching vector.
 * @param x The item to search for in the vector.
 *
 * @return True if the search is successful; otherwise, returns false.
 *
 *********************************************************************************/
bool linearSearch(const vector<int> &v, int x);

/**
 * A binary search algorithm, where x is the searched item in vector v
 *
 * @param v The searching vector.
 * @param x The item to search for in the vector.
 *
 * @return True if the search is successful; otherwise, returns false.
 *
 *********************************************************************************/
bool binarySearch(const vector<int> &v, int x);

/**
 * A generic search algorithm - takes a pointer to the search routine p(), and then it calls p() for
 * each element of vector v2 in vector v1.
 *
 * The function computes the total number of successful searches and returns that value to
 * the main routine as an input argument to the print routine printStat(), which is used to print
 * out the final statistics for a search algorithm.
 *
 * @param v1 Vector v1.
 * @param v2 Vector v2.
 * @param p Subroutine p().
 *
 * @return Return the total number of successful searches.
 *
 *********************************************************************************/
int searchVector(const vector<int> &v1, const vector<int> &v2, bool(*p)(const vector<int> &,int));

/**
 * A sort algorithm to sort the elements of vector v in ascending order
 *
 * @param v Seaching vector.
 *
 *********************************************************************************/
void sortVector(vector<int> &v);

/**
 * Prints the content of vector v.
 *
 * @param v The vector needs to be printed.
 *
 *********************************************************************************/
void printVector(const vector<int> &v);

/**
 * Prints the percent of successful searches as floating-point numbers.
 *
 * @param totalSucCnt The total number of successful comparisons.
 * @param vectorSz The size of the test vector.
 *
 *********************************************************************************/
void printStat(int totalSucCnt, int vectorSz);

#endif /* twosort_h */
